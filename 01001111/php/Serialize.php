<?php
/*	Serialize Class - A simple interface for serializing arrays and objects
 *		for transmission/storage.
 *	Unserialize Class - A simple interface for unserializing the strings
 *		generated by the serialize class.
 *
 *	Copyright (c) 2006 Oliver C Dodd
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the 
 *  Software is furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *	Note: the _r parameter is analagous to the -r flag for recursion.
 */
class Serialize
{
	/** Serialize::csv() - Serializes an array as a comma separated list
	 *  @param $a	= the array to be serialized
	 *  @param $_r	= recursive flag
	 *  @param $d	= optional delimiter, default is ","
	 */
	public static function csv($a=array(),$_r=false,$d=',')
	{
		if (!is_array($a)) return $a;
		if ($_r) foreach($a as $k => $v) $a[$k] = self::csv($v);
		return @implode($d,$a);
	}
	
	/** Serialize::kvlist() - Serialize an array as key:value delimited list
	 *  @param $a	= the array to be serialized
	 *  @param $_r	= recursive flag, forces "csv" on subarrays
	 *  @param $kvd	= optional key value delimiter, default is ":"
	 *  @param $pd	= optional key value pair delimiter, default is ","
	 *  @param $rd	= optional recursive values delimiter, default is "|"
	 */
	public static function kvlist($a=array(),$_r=false,$kvd=':',$pd=',',$rd='|')
	{
		if (!is_array($a)) return $a;
		if ($_r) foreach($a as $k => $v) $a[$k] = self::csv($v,true,$rd);
		$p = array();
		foreach ($a as $k => $v) $p[$k] = $k.$kvd.$v;
		return @implode($pd,$p);
	}
	
	/** Serialize::httpquery() - Serializes an array as an http query string
	 *  @param $a	= the array to be serialized
	 *  @param $_r	= recursive flag
	 */
	public static function httpquery($a=array(),$_r=false)
	{
		if (!is_array($a)) return $a;
		$p = array();
		foreach ($a as $k => $v)
			$p[$k] = rawurlencode($k).'='.@rawurlencode(
				$_r&&is_array($v)
					? self::httpquery($v,$_r)
					: $v
				);
		return @implode('&',$p);
	}
	
	/** Serialize::json() - Serializes object/array/variable as JSON string
	 *  @param $o	= the object, array, or variable to be serialized
	 * NOTE: Tries to use PHP's built in JSON functions by default
	 */
	public static function json($o=array())
	{
		if (function_exists('json_encode')) return json_encode($o);
	}
	
	/** Serialize::php() - Serializes an object/array/variable using php's
	 *		serialization function
	 *  @param $o	= the object, array, or variable to be serialized
	 */
	public static function php($o=array()) { return serialize($o); }
}
class Unserialize
{
	/** Unserialize::csv() - Converts a comma separated list to an array
	 *  @param $s		= the string to be unserialized
	 *  @param $d		= optional delimiter, default is ","
	 *  @param $flat1	= flatten single value arrays into one value?
	 */
	public static function csv($s='',$d=',',$flat1=false)
	{
		$a = (is_string($s)) ? @explode($d,$s) : array();
		if ($flat1&&(count($a) == 1)) $a = array_shift($a);
		return $a;
	}
	
	/** Unserialize::kvlist() - Convert key/value delimited list to an array
	 *  @param $s	= the string to be unserialized
	 *  @param $_r	= recursive flag, unserialize forced "csv" into subarray
	 *  @param $kvd	= optional key value delimiter, default is ":"
	 *  @param $pd	= optional key value pair delimiter, default is ","
	 *  @param $rd	= optional recursive values delimiter, default is "|"
	 */
	public static function kvlist($s='', $_r=false, $kvd=':', $pd=',', $rd='|')
	{
		if (!is_string($s)) return array();
		$a = array();
		$p = @explode($pd,$s);
		foreach ($p as $kvp) {
			$kv = explode($kvd,$kvp);
			if (count($kv) == 2) $a[$kv[0]] = $kv[1];
			elseif ((count($kv) == 1)&&$kv[0]) array_push($a,$kv[0]);
		}
		if ($_r) foreach($a as $k => $v) $a[$k] = self::csv($v,$rd,true);
		return $a;
	}
	
	/** Unserialize::httpquery() - Converts http query string to an array
	 *  @param $s	= the string to be unserialized
	 *  @param $_r	= recursive flag
	 */
	public static function httpquery($s='',$_r=false)
	{
		if (!is_string($s)) return $s;
		$a = array();
		$p = @explode('&',$s);
		foreach ($p as $kvp) {
			$kv = explode('=',$kvp);
			if ((count($p) == 1)&&(count($kv) == 1)) return $kvp;
			if (count($kv) == 2)
				$a[rawurldecode($kv[0])] = $_r
					? self::httpquery(rawurldecode($kv[1]))
					: rawurldecode($kv[1]);
		}
		return $a;
	}
	
	/** Unserialize::json() - Converts JSON string to an object or array
	 *  @param $s	= the string to be unserialized
	 *  @param $_a	= associative array flag, return array or object?
	 * NOTE: Tries to use PHP's built in JSON functions by default
	 */
	public static function json($s='',$_a=false)
	{
		if (function_exists('json_decode')) return json_decode($s,$_a);
	}
	
	/** Unserialize::php() - Unserializes a string using php's
	 *	unserialize function
	 *  @param $s	= the string to be unserialized
	 */
	public static function php($s='') { return unserialize($s); }
}
?>